{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"A production ready FastAPI template Metadata and dependency information is stored in the pyproject.toml for compatibility with both pip and poetry . Flake8 , pylint , and isort configurations are defined to be compatible with the black autoformatter. Pylint settings are based on the Google Python Style Guide and adapted for black compatibility. Linting tools run automatically before each commit using pre-commit , black, and isort. Test coverage reports are generated during every commit and pull request using coverage and pytest-cov . All reports are automatically uploaded and archived on codecov.io . Unit tests are written using pytest and static type checking is provided by mypy . Package releases to PyPI with dynamic versioning provided by bump2version begin automatically whenever a new tag is created in github. Docker images are automatically published to Docker Hub during every release. Images are tagged with a semantic version number which agrees with the git tag and the PyPI version number. Documentation is built using mkdocs and mkdocstrings . Docs are automatically deployed to github pages during every release. Release notes are automatically generated during every release using github actions .","title":"Home"},{"location":"#a-production-ready-fastapi-template","text":"Metadata and dependency information is stored in the pyproject.toml for compatibility with both pip and poetry . Flake8 , pylint , and isort configurations are defined to be compatible with the black autoformatter. Pylint settings are based on the Google Python Style Guide and adapted for black compatibility. Linting tools run automatically before each commit using pre-commit , black, and isort. Test coverage reports are generated during every commit and pull request using coverage and pytest-cov . All reports are automatically uploaded and archived on codecov.io . Unit tests are written using pytest and static type checking is provided by mypy . Package releases to PyPI with dynamic versioning provided by bump2version begin automatically whenever a new tag is created in github. Docker images are automatically published to Docker Hub during every release. Images are tagged with a semantic version number which agrees with the git tag and the PyPI version number. Documentation is built using mkdocs and mkdocstrings . Docs are automatically deployed to github pages during every release. Release notes are automatically generated during every release using github actions .","title":"A production ready FastAPI template"},{"location":"developer_guide/commands/","text":"Commands make clean - Remove all build, testing, and static documentation files. make test - Run the tests using pytest. make lint - Run the linting tools. Includes pre-commit hooks, black, isort, flake8, pylint, and mypy. make check - Run the test and lint commands. make build - Build a docker image locally using the Dockerfile. The image will be named pytemplates_fastapi . make gen-docs - Generate HTML documentation. make docs - Generate HTML documentation and serve it to the browser. make pre-release increment={major/minor/patch} - Bump the version and create a release tag. Should only be run from the main branch. Passes the increment value to bump2version to create a new version number dynamically. The new version number will be added to __version__.py and pyproject.toml and a new commit will be logged. The tag will be created from the new commit.","title":"Commands"},{"location":"developer_guide/commands/#commands","text":"make clean - Remove all build, testing, and static documentation files. make test - Run the tests using pytest. make lint - Run the linting tools. Includes pre-commit hooks, black, isort, flake8, pylint, and mypy. make check - Run the test and lint commands. make build - Build a docker image locally using the Dockerfile. The image will be named pytemplates_fastapi . make gen-docs - Generate HTML documentation. make docs - Generate HTML documentation and serve it to the browser. make pre-release increment={major/minor/patch} - Bump the version and create a release tag. Should only be run from the main branch. Passes the increment value to bump2version to create a new version number dynamically. The new version number will be added to __version__.py and pyproject.toml and a new commit will be logged. The tag will be created from the new commit.","title":"Commands"},{"location":"developer_guide/developer_setup/","text":"Developer Setup To begin local development, clone the PyTemplates/fastapi repository and use one of the following methods to build it. Commands should be executed from inside of the project home folder. Using poetry poetry install Install optional dependencies using the --extras flag: poetry install --extras=environment Using pip pip install . Install optional dependencies using square brackets: pip install .[environment] Environments test = [ \"pytest\", \"pytest-cov\", ] lint = [ \"black\", \"isort\", \"flake8\", \"pylint\", \"mypy\", \"pre-commit\", ] docs = [ \"mkdocs\", \"mkdocstrings\", \"mkdocstrings-python\", \"mkdocs-material\", ] # Includes all optional dependencies dev = [ \"pytest\", \"pytest-cov\", \"black\", \"isort\", \"flake8\", \"pylint\", \"mypy\", \"pre-commit\", \"mkdocs\", \"mkdocstrings\", \"mkdocstrings-python\", \"mkdocs-material\", \"bump2version\", ] Using a local docker build To build an image locally from the Dockerfile: make build To run the image: make run","title":"Developer Setup"},{"location":"developer_guide/developer_setup/#developer-setup","text":"To begin local development, clone the PyTemplates/fastapi repository and use one of the following methods to build it. Commands should be executed from inside of the project home folder.","title":"Developer Setup"},{"location":"developer_guide/developer_setup/#using-poetry","text":"poetry install Install optional dependencies using the --extras flag: poetry install --extras=environment","title":"Using poetry"},{"location":"developer_guide/developer_setup/#using-pip","text":"pip install . Install optional dependencies using square brackets: pip install .[environment]","title":"Using pip"},{"location":"developer_guide/developer_setup/#environments","text":"test = [ \"pytest\", \"pytest-cov\", ] lint = [ \"black\", \"isort\", \"flake8\", \"pylint\", \"mypy\", \"pre-commit\", ] docs = [ \"mkdocs\", \"mkdocstrings\", \"mkdocstrings-python\", \"mkdocs-material\", ] # Includes all optional dependencies dev = [ \"pytest\", \"pytest-cov\", \"black\", \"isort\", \"flake8\", \"pylint\", \"mypy\", \"pre-commit\", \"mkdocs\", \"mkdocstrings\", \"mkdocstrings-python\", \"mkdocs-material\", \"bump2version\", ]","title":"Environments"},{"location":"developer_guide/developer_setup/#using-a-local-docker-build","text":"To build an image locally from the Dockerfile: make build To run the image: make run","title":"Using a local docker build"},{"location":"developer_guide/releases/","text":"Releases A release should consist of the following two steps from a tested, linted, and up to date copy of the main branch: make pre-release increment={major/minor/patch} - Commit the version number bump and create a new tag locally. The version number follows semantic versioning standards (major.minor.patch) and the tag is the version number prepended with a 'v'. git push --follow-tags - Update the main branch with only the changes from the version bump. Publish the new tag and kick off the release workflow.","title":"Releases"},{"location":"developer_guide/releases/#releases","text":"A release should consist of the following two steps from a tested, linted, and up to date copy of the main branch: make pre-release increment={major/minor/patch} - Commit the version number bump and create a new tag locally. The version number follows semantic versioning standards (major.minor.patch) and the tag is the version number prepended with a 'v'. git push --follow-tags - Update the main branch with only the changes from the version bump. Publish the new tag and kick off the release workflow.","title":"Releases"},{"location":"developer_guide/workflows/","text":"Workflows Test Run the tests on every push/pull_request to the main branch. Writes a coverage report using pytest-cov and uploads it to codecov.io. Tests run against python versions 3.8 and 3.9. Optional manual trigger in the github actions tab. Lint Run the linting tools on every push/pull_request to the main branch. Includes pre-commit hooks, black, isort, flake8, pylint, and mypy. Optional manual trigger in the github actions tab. Release Build a wheel distribution, build a docker image, create a github release, and publish to PyPI and Docker Hub whenever a new tag is created. Linting and testing steps must pass before the release steps can begin. Documentation is automatically published to the docs branch and hosted on github pages. All github release tags, docker image tags, and PyPI version numbers are in agreement with one another and follow semantic versioning standards. Build and Publish Docs Build the documentation, publish to the docs branch, and release to github pages. Runs only on a manual trigger in the github actions tab. Build and Publish Docker Image Build the docker image, tag it with the branch name, and publish it to dockerhub. Runs only a manual trigger in the github actions tab.","title":"Workflows"},{"location":"developer_guide/workflows/#workflows","text":"","title":"Workflows"},{"location":"developer_guide/workflows/#test","text":"Run the tests on every push/pull_request to the main branch. Writes a coverage report using pytest-cov and uploads it to codecov.io. Tests run against python versions 3.8 and 3.9. Optional manual trigger in the github actions tab.","title":"Test"},{"location":"developer_guide/workflows/#lint","text":"Run the linting tools on every push/pull_request to the main branch. Includes pre-commit hooks, black, isort, flake8, pylint, and mypy. Optional manual trigger in the github actions tab.","title":"Lint"},{"location":"developer_guide/workflows/#release","text":"Build a wheel distribution, build a docker image, create a github release, and publish to PyPI and Docker Hub whenever a new tag is created. Linting and testing steps must pass before the release steps can begin. Documentation is automatically published to the docs branch and hosted on github pages. All github release tags, docker image tags, and PyPI version numbers are in agreement with one another and follow semantic versioning standards.","title":"Release"},{"location":"developer_guide/workflows/#build-and-publish-docs","text":"Build the documentation, publish to the docs branch, and release to github pages. Runs only on a manual trigger in the github actions tab.","title":"Build and Publish Docs"},{"location":"developer_guide/workflows/#build-and-publish-docker-image","text":"Build the docker image, tag it with the branch name, and publish it to dockerhub. Runs only a manual trigger in the github actions tab.","title":"Build and Publish Docker Image"},{"location":"extras/credits/","text":"Credits Other python package templates https://github.com/waynerv/cookiecutter-pypackage https://github.com/AllenCellModeling/cookiecutter-pypackage Actions https://github.com/JamesIves/github-pages-deploy-action https://github.com/softprops/action-gh-release","title":"Credits"},{"location":"extras/credits/#credits","text":"","title":"Credits"},{"location":"extras/credits/#other-python-package-templates","text":"https://github.com/waynerv/cookiecutter-pypackage https://github.com/AllenCellModeling/cookiecutter-pypackage","title":"Other python package templates"},{"location":"extras/credits/#actions","text":"https://github.com/JamesIves/github-pages-deploy-action https://github.com/softprops/action-gh-release","title":"Actions"},{"location":"extras/file_tree/","text":"File Tree","title":"File Tree"},{"location":"extras/file_tree/#file-tree","text":"","title":"File Tree"},{"location":"user_guide/installation/","text":"Installation To download the CLI application using docker : docker pull pytemplates/fastapi:latest","title":"Installation"},{"location":"user_guide/installation/#installation","text":"To download the CLI application using docker : docker pull pytemplates/fastapi:latest","title":"Installation"},{"location":"user_guide/usage/","text":"Usage Using a local copy of the PyTemplates/fastapi repository: make start Building and running a local docker image: make build make run Pulling and running a public docker image: docker pull pytemplates/fastapi:latest docker run --rm -p 8001:80 pytemplates/fastapi","title":"Usage"},{"location":"user_guide/usage/#usage","text":"Using a local copy of the PyTemplates/fastapi repository: make start Building and running a local docker image: make build make run Pulling and running a public docker image: docker pull pytemplates/fastapi:latest docker run --rm -p 8001:80 pytemplates/fastapi","title":"Usage"}]}